(defvar onesR 0)
(defun increment (count)
   (let ((val 0)
         (sem1 (make-semaphore 1))
         (sem2 (make-semaphore 1)))
     (wait-to-finish
      (a-dotimes (i count)
        (progn
          (sem-wait sem2)
          (sem-signal sem1)
          (setf val (+ val 1))
          (sem-signal sem1))
        (progn
          (sem-wait sem1)
          (sem-signal sem2)
          (setf val (+ val 1))
          (sem-signal sem2))))
     val))

(defun onesZeros (num)
  (wait-to-finish
   (let ((pair '())
         (ones 0)
         (countV 0)
         (sended -1)
         (sem1 (make-semaphore 1))
         (sem2 (make-semaphore 1)))
     (a-dotimes (i num)
       (progn 
         (sem-wait sem2)
         (sem-signal sem1)
         (setf pair (cons (+ (random 10) 1) (+ 1 (random 10))))
         (format t "~d" pair)
         (sem-signal sem1))
       (progn
         (sem-wait sem1)
         (sem-signal sem2)
         (if (= (mod (car pair) (cdr pair)) 0)
             (setf sended 1)
           (setf sended 0))
         (setf pair '())
         (sem-signal sem2))
       (progn
         (sem-wait sem1)
         (sem-wait sem2)
         (if (= sended 1)
             (progn 
               (setf ones (+ ones 1))
               (setf countV (+ countV 1)))
           (setf countV (+ countV 1))))
       (setf onesR ones))))
  onesR)
