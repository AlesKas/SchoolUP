;There are only 2 genders! Change my mind.
(defclass toilets ()
  ((womanSemaphore :initform (make-semaphore 1))
   (manSemaphore :initform (make-semaphore 1))
   (mcount :initform 0)
   (wcount :initform 0)
   (semFullMan :initform (make-semaphore 3))
   (semFullWoman :initform (make-semaphore 3))
   (semWait :initform (make-semaphore 1))
   (semEmpty :initform (make-semaphore 1))))

(defvar printsem (make-semaphore 1))

(defclass woman ()
 ())

(defclass man ()
  ())

(defvar queueue (list (make-instance 'man) (make-instance 'man) (make-instance 'man) (make-instance 'man) (make-instance 'woman) (make-instance 'man) (make-instance 'man) (make-instance 'woman) (make-instance 'man) (make-instance 'woman) (make-instance 'man)))

(defmethod goToToilet ((toilet toilets))
  (wait-to-finish
   (a-dolist (gender queueue)
     (if (typep gender 'man)
         (progn
           (sem-wait (slot-value toilet 'semwait))
           (sem-wait (slot-value toilet 'mansemaphore))
           (incf (slot-value toilet 'mcount))
           (if (= (slot-value toilet 'mcount) 1)
               (sem-wait (slot-value toilet 'semempty)))
           (sem-signal (slot-value toilet 'mansemaphore))
           (sem-signal (slot-value toilet 'semwait))
           (sem-wait (slot-value toilet 'semfullman))
           (sem-wait printsem)
           (print "man in")
           (sem-signal printsem)
           (sleep 2)
           (sem-wait printsem)
           (print "man out")
           (sem-signal printsem)
           (sem-signal (slot-value toilet 'semfullman))
           (sem-wait (slot-value toilet 'mansemaphore))
           (decf (slot-value toilet 'mcount))
           (if (= (slot-value toilet 'mcount) 0)
               (sem-signal (slot-value toilet 'semempty)))
           (sem-signal (slot-value toilet 'mansemaphore)))
       (progn
         (sem-wait (slot-value toilet 'semwait))
         (sem-wait (slot-value toilet 'womansemaphore))
         (incf (slot-value toilet 'wcount))
         (if (= (slot-value toilet 'wcount) 1)
             (sem-wait (slot-value toilet 'semempty)))
         (sem-signal (slot-value toilet 'womansemaphore))
         (sem-signal (slot-value toilet 'semwait))
         (sem-wait (slot-value toilet 'semfullwoman))
          (sem-wait printsem)
         (print "woman in")
         (sem-signal printsem)
         (sleep 2)
          (sem-wait printsem)
         (print "woman out")
         (sem-signal printsem)
         (sem-signal (slot-value toilet 'semfullwoman))
         (sem-wait (slot-value toilet 'womansemaphore))
         (decf (slot-value toilet 'wcount))
         (if (= (slot-value toilet 'wcount) 0)
             (sem-signal (slot-value toilet 'semempty)))
         (sem-signal (slot-value toilet 'womansemaphore)))))))
